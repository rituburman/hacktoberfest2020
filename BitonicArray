//PROGRAM TO SEARCH AN ELEMENT IN BITONIC ARRAY 

#include <bits/stdc++.h> 
using namespace std; 
int ascendingBinarySearch(int arr[], int low,int high, int key) 
{ 
while (low <= high) 
{ 
	int mid = low + (high - low) / 2; 
	if (arr[mid] == key) 
		return mid; 
	if (arr[mid] > key) 
		high = mid - 1; 
	else
		low = mid + 1; 
} 
	return -1; 
} 
int descendingBinarySearch(int arr[], int low,int high, int key) 
{ 
while (low <= high) 
{ 
	int mid = low + (high - low) / 2; 
	if (arr[mid] == key) 
		return mid; 
	if (arr[mid] < key) 
		high = mid - 1; 
	else
		low = mid + 1; 
} 
	return -1; 
}

int findBitonicPoint(int arr[] ,int n, int l, int r ) 
{ 
	int mid; 
	
	mid = (r + l) / 2; 
	if(arr[mid] > arr[mid-1] && arr[mid] > arr[mid + 1]) 
	{ 
		return mid; 
	} 
	
	else
	if(arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) 
	{ 
		findBitonicPoint(arr,n, mid , r); 
	} 

	else
	if(arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1]) 
	{ 
		findBitonicPoint(arr, n, l, mid); 
	} 
} 

// Function to search key in bitonic array 
int searchBitonic(int arr[], int n, int key, int index) 
{ 
	if(key > arr[index]) 
		return -1; 
	
	else if(key == arr[index]) 
		return index; 
	
	else
	{ int temp = ascendingBinarySearch(arr, 0, index - 1, key); 
		if (temp != -1) 
		{ 
			return temp; 
		} 
		
		// Search in right of k 
		return descendingBinarySearch(arr, index + 1, n - 1, key); 
	} 
} 
int main() 
{
    int n;
    cin>>n;
	int arr[n]; 
	for(int i=0;i<n;i++)
	   cin>>arr[i];
	int key;
	cin>>key;
	int l, r; 
	l = 0; 
	r = n - 1; 
	int index; 
	index = findBitonicPoint(arr, n, l, r); 
	
	int x = searchBitonic(arr, n, key, index); 
	
	if (x == -1) 
	cout << "Element Not Found"<<endl; 
	else
	cout << "Element Found at index " << x<<endl; 
	
	return 0; 
} 








